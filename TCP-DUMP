
import struct,sys

def ler_cabecalho_arquivo_cap(arquivo):
    try:
        cabecalho = arquivo.read(24)
        magic_number, major_version, minor_version, reserved1, reserved2, snaplen, fcs, link_type = struct.unpack('!IHHIIIIH', cabecalho)
        return {
            "Número Mágico": hex(magic_number),
            "Versão Principal": major_version,
            "Versão Secundária": minor_version,
            "Reservado1": reserved1,
            "Reservado2": reserved2,
            "Tamanho do SnapLen": snaplen,
            "FCS": fcs,
            "Tipo de Link": link_type,
        }
    except struct.error:
        return None

def ler_pacotes(arquivo):
    pacotes = []
    numero_pacote = 0
    while True:
        try:
            pacote = arquivo.read(16)
            if not pacote:
                break
            numero_pacote += 1
            info_pacote = ler_pacote(arquivo, numero_pacote)
            pacotes.append(info_pacote)
        except struct.error:
            break
    return pacotes

def ler_pacote(arquivo, numero_pacote):
    try:
        pacote = arquivo.read(16)
        timestamp_seconds, timestamp_microseconds, captured_len, original_len = struct.unpack('!IIII', pacote)
        return {
            "Número do Pacote": numero_pacote,
            "Timestamp (Segundos)": timestamp_seconds,
            "Timestamp (Microssegundos ou Nanossegundos)": timestamp_microseconds,
            "Tamanho Capturado do Pacote": captured_len,
            "Tamanho Original do Pacote": original_len,
        }
    except struct.error:
        return None

def main():
    nome_arquivo_cap = input("Digite o nome do arquivo .cap: ")
    inicio_captura = None
    fim_captura = None
    tamanho_maior_pacote = 0
    pacotes_incompletos = 0
    tamanho_total_pacotes = 0
    ip_par_com_maior_trafego = ("N/A", "N/A")
    interacoes_ip = []
    try:
        with open(nome_arquivo_cap, 'rb') as arquivo:
            cabecalho = ler_cabecalho_arquivo_cap(arquivo)
            if cabecalho:
                print("Cabeçalho do Arquivo .cap:")
                for chave, valor in cabecalho.items():
                    print(f"{chave}: {valor}")
                pacotes = ler_pacotes(arquivo)
                if pacotes:
                    for pacote in pacotes:
                        tamanho_pacote = pacote.get("Tamanho Original do Pacote", 0)
                        timestamp_seconds = pacote.get("Timestamp (Segundos)", 0)
                        if inicio_captura is None:
                            inicio_captura = timestamp_seconds
                        fim_captura = timestamp_seconds
                        if tamanho_pacote > tamanho_maior_pacote:
                            tamanho_maior_pacote = tamanho_pacote
                        if pacote.get("Tamanho Capturado do Pacote", 0) < tamanho_pacote:
                            pacotes_incompletos += 1
                        tamanho_total_pacotes += tamanho_pacote
                       
                    print(f"a) Captura iniciou em: {inicio_captura} e terminou em: {fim_captura}")
                    print(f"b) Tamanho do maior pacote capturado: {tamanho_maior_pacote} bytes")
                    print(f"c) Pacotes incompletos: {pacotes_incompletos}")
                    print(f"d) Tamanho médio dos pacotes capturados: {tamanho_total_pacotes / (pacotes_incompletos + 1)} bytes")
                    print(f"e) Par de IP com maior tráfego: {ip_par_com_maior_trafego[0]} <-> {ip_par_com_maior_trafego[1]}")
                    print(f"f) Número de interações com outros IPs para o IP da interface capturada: {len(interacoes_ip)}")
                else:
                    print("Nenhum pacote encontrado no arquivo .cap.")
            else:
                print("Arquivo .cap não possui um cabeçalho válido.")
    except FileNotFoundError:
        print(f'ERRO: O arquivo {nome_arquivo_cap} não foi encontrado.')
    except Exception as e:
        print(f'ERRO: {e}')

if __name__ == "__main__":
    main()


