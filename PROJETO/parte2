
HOST_SERVER = 'localhost'
SOCKET_PORT = 12345
BUFFER_SIZE = 1024
MAX_LISTEN = 5
CODE_PAGE = 'utf-8'

# client.py
import socket
from socket_constants import *

def iniciar_cliente():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as tcp_socket:
        try:
            tcp_socket.connect((HOST_SERVER, SOCKET_PORT))
            print(f"Conectado ao servidor em {HOST_SERVER}:{SOCKET_PORT}")

            while True:
                msg = input('Digite a mensagem (ou "sair" para encerrar):')
                if msg.lower() == 'sair':
                    break
                tcp_socket.sendall(msg.encode(CODE_PAGE))
                resposta = tcp_socket.recv(BUFFER_SIZE)
                print(f'Resposta do servidor: {resposta.decode(CODE_PAGE)}')

        except Exception as e:
            print(f"Erro ao se conectar ao servidor:{e}")
if __name__ == "__main__":
    iniciar_cliente()

+---------------------------------------------------------------------------------------------------------------------------------------------------+

# server.py
import socket
from socket_constants import *

def iniciar_servidor():
    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    tcp_socket.bind((HOST_SERVER, SOCKET_PORT))
    tcp_socket.listen(MAX_LISTEN)

    print(f"Servidor aguardando conexões {HOST_SERVER}:{SOCKET_PORT}")

    try:
        while True:
            conexao, cliente = tcp_socket.accept()
            print(f'Conectado por: {cliente}')

            while True:
                mensagem = conexao.recv(BUFFER_SIZE)
                if not mensagem:
                    break
                print(f'{cliente}: {mensagem.decode(CODE_PAGE)}')

                # Devolvendo uma mensagem (echo) ao cliente
                mensagem_retorno = 'Devolvendo...' + mensagem.decode(CODE_PAGE)
                conexao.send(mensagem_retorno.encode(CODE_PAGE))

            print(f'Finalizando Conexão do Cliente {cliente}')
            conexao.close()

    except KeyboardInterrupt:
        print("Servidor encerrado manualmente.")

    finally:
        tcp_socket.close()

if __name__ == "__main__":
    iniciar_servidor()



