
import os
import struct
import requests
import json
import sys

def extract_exif_info(file_path):
    try:
        with open(file_path, 'rb') as file:
            # Verifica se o arquivo começa com os bytes FF D8 FF E1
            if file.read(4) != b'\xFF\xD8\xFF\xE1':
                return None

            # Pula os próximos 18 bytes
            file.seek(18)

            # Lê o número de metadados
            num_metadata = struct.unpack('>H', file.read(2))[0]

            metadata = {}

            for _ in range(num_metadata):
                # Lê o identificador do metadado
                tag_id = struct.unpack('>H', file.read(2))[0]
                # Lê o tipo do metadado
                data_type = struct.unpack('>H', file.read(2))[0]
                # Lê o número de repetições
                num_values = struct.unpack('>I', file.read(4))[0]
                # Lê o valor do metadado
                if data_type == 2:
                    # Se o tipo for string, lê como uma string
                    value = file.read(num_values)
                    value = value.decode('utf-8')
                else:
                    # Caso contrário, lê como inteiros não assinados de 4 bytes
                    value = struct.unpack('>I', file.read(4))[0]

                metadata[tag_id] = value

            return metadata
    except Exception as e:
        print(f"Erro ao processar o arquivo {file_path}: {str(e)}")
        return None

def get_location_info(latitude, longitude):
    try:
        # Obtém informações de localização a partir de coordenadas de latitude e longitude
        url = f"https://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}"
        response = requests.get(url)
        if response.status_code == 200:
            location_data = json.loads(response.text)
            return location_data
        return None
    except Exception as e:
        print(f"Erro ao obter informações de localização: {str(e)}")
        return None

def main():
    try:
        directory = input("Digite o caminho para o diretório: ")

        cities = {}

        for root, _, files in os.walk(directory):
            for filename in files:
                file_path = os.path.join(root, filename)
                exif_info = extract_exif_info(file_path)

                if exif_info:
                    # Verifica se há informações de GPS
                    if 0x8825 in exif_info:
                        gps_metadata = exif_info[0x8825]

                        # Verifica se há informações de latitude e longitude
                        if 0x0002 in gps_metadata and 0x0004 in gps_metadata:
                            latitude = gps_metadata[0x0002]
                            longitude = gps_metadata[0x0004]

                            location_info = get_location_info(latitude, longitude)

                            if location_info:
                                city = location_info.get('address', {}).get('city')
                                if city:
                                    cities[city] = cities.get(city, 0) + 1

                    # Exiba outras informações EXIF conforme necessário
                    width = exif_info.get(0x0100)
                    height = exif_info.get(0x0101)
                    manufacturer = exif_info.get(0x010F)
                    model = exif_info.get(0x0110)
                    capture_date = exif_info.get(0x9003)

                    print(f"Arquivo: {filename}")
                    print(f"Largura: {width}")
                    print(f"Altura: {height}")
                    print(f"Fabricante da câmera: {manufacturer}")
                    print(f"Modelo da câmera: {model}")
                    print(f"Data de captura: {capture_date}")
                    print(f"Latitude: {latitude}")
                    print(f"Longitude: {longitude}")
                    print(f"Cidade: {city}\n")

        print("Cidades em que fotos foram capturadas e quantas em cada uma delas:")
        for city, count in cities.items():
            print(f"{city}: {count} fotos")
    except Exception as e:
        print(f"Ocorreu um erro inesperado: {str(e)}")

if __name__ == "__main__":
    main()
