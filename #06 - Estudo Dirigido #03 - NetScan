import socket,sys

def generate_port_list(filename):
    with open(filename, 'w') as file:
        for port in range(996):  # Gera portas de 0 a 995
            protocol = 'TCP' if port % 2 == 0 else 'UDP'
            description = f"Porta de {port}"
            file.write(f"{port} {protocol} {description}\n")

def load_ports(filename):
    ports = []
    try:
        with open(filename, 'r') as file:
            for line in file:
                parts = line.strip().split()
                if len(parts) == 3:
                    ports.append({
                        'number': int(parts[0]),
                        'protocol': parts[1],
                        'description': parts[2]
                    })
    except FileNotFoundError:
        print(f"Erro: O arquivo {filename} não foi encontrado.")
    except Exception as e:
        print(f"Erro ao carregar as portas do arquivo: {e}")
    return ports

def check_ports(host, ports):
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM if port['protocol'] == 'TCP' else socket.SOCK_DGRAM)
        sock.settimeout(1)

        try:
            result = sock.connect_ex((host, port['number']))

            status = "Responde (Aberta)" if result == 0 else "Não Responde (Fechada)"

            print(f"Porta {port['number']}: Protocolo: {port['protocol']}: ({port['description']})/ Status: {status}")
        except socket.error as e:
            print(f"Erro ao verificar a porta {port['number']}: {e}")
        finally:
            sock.close()

if __name__ == "__main__":
    try:
        generate_port_list("port_list.txt")  # Gera o arquivo de listagem de portas
        strHost = input("Digite o endereço IP ou host a ser verificado: ")
        ipHost = socket.gethostbyname(strHost)
        ports = load_ports("port_list.txt")

        print("\nVerificando portas...\n")
        check_ports(ipHost, ports)
    except KeyboardInterrupt:
        print("\nOperação interrompida pelo usuário.")
    except Exception as e:
        print(f"Erro geral: {e}")


